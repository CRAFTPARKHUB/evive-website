// Generated by Framer (c90df04)

import { addFonts, addPropertyControls, ControlType, cx, CycleVariantState, useActiveVariantCallback, useComponentViewport, useLocaleInfo, useVariantState, withCSS } from "framer";
import { LayoutGroup, motion, MotionConfigContext } from "framer-motion";
import * as React from "react";

const cycleOrder = ["XTyZS4MpB", "aYA2dZuo5"];

const serializationHash = "framer-u8Aii"

const variantClassNames = {aYA2dZuo5: "framer-v-1jx1ofi", XTyZS4MpB: "framer-v-11u7wwq"};

function addPropertyOverrides(overrides, ...variants) {
const nextOverrides = {}
variants?.forEach(variant => variant && Object.assign(nextOverrides, overrides[variant]))
return nextOverrides
}

const transition1 = {bounce: 0.2, delay: 0, duration: 0.4, type: "spring"}

const Transition = ({value, children}) => {
const config = React.useContext(MotionConfigContext)
const transition = value ?? config.transition
const contextValue = React.useMemo(() => ({ ...config, transition }), [JSON.stringify(transition)])
return <MotionConfigContext.Provider value={contextValue}>{children}</MotionConfigContext.Provider>
}

const Variants = motion.create(React.Fragment)

const humanReadableVariantMap = {Close: "aYA2dZuo5", Default: "XTyZS4MpB"}

const getProps = ({click, height, id, width, ...props}) => { return {...props, AR4mury4J: click ?? props.AR4mury4J, variant: humanReadableVariantMap[props.variant] ?? props.variant ?? "XTyZS4MpB"} }

const createLayoutDependency = (props, variants) => {if (props.layoutDependency) return variants.join('-') + props.layoutDependency
return variants.join('-')}

export interface Props extends React.HTMLAttributes<HTMLDivElement> { style?: Record<string, unknown>;className?: string;layoutId?: string | number;variant?: keyof typeof humanReadableVariantMap;click?: any; }

const Component = React.forwardRef<HTMLDivElement, Props>(function(props, ref) {

const { activeLocale, setLocale } = useLocaleInfo()

const {style, className, layoutId, variant, AR4mury4J, ...restProps} = getProps(props)

const {baseVariant, classNames, clearLoadingGesture, gestureHandlers, gestureVariant, isLoading, setGestureState, setVariant, variants} = useVariantState({cycleOrder, defaultVariant: "XTyZS4MpB", variant, variantClassNames})

const layoutDependency = createLayoutDependency(props, variants)

const { activeVariantCallback, delay } = useActiveVariantCallback(baseVariant)

const onTap933xpe = activeVariantCallback(async (...args) => {
setGestureState({isPressed: false})
if (AR4mury4J) {const res = await AR4mury4J(...args);
if (res === false) return false;}
})

const ref1 = React.useRef<HTMLElement>(null)

const defaultLayoutId = React.useId()

const sharedStyleClassNames = []

const componentViewport = useComponentViewport()

return (<LayoutGroup id={layoutId ?? defaultLayoutId}>
<Variants animate={variants} initial={false}><Transition value={transition1}><motion.div {...restProps} {...gestureHandlers} className={cx(serializationHash, ...sharedStyleClassNames, "framer-11u7wwq", className, classNames)} data-framer-name={"Default"} data-highlight layoutDependency={layoutDependency} layoutId={"XTyZS4MpB"} onTap={onTap933xpe} ref={ref ?? ref1} style={{...style}} {...addPropertyOverrides({aYA2dZuo5: {"data-framer-name": "Close"}}, baseVariant, gestureVariant)}><motion.div className={"framer-1g2vpwi"} layoutDependency={layoutDependency} layoutId={"RM95aauRz"} style={{backgroundColor: "var(--token-7f09362c-5ec1-40a3-9549-f3af082a64fe, rgb(0, 0, 0))", rotate: 0}} variants={{aYA2dZuo5: {rotate: 45}}}/><motion.div className={"framer-b9gbwx"} layoutDependency={layoutDependency} layoutId={"bhJwNY8tE"} style={{backgroundColor: "var(--token-7f09362c-5ec1-40a3-9549-f3af082a64fe, rgb(0, 0, 0))", rotate: 0}} variants={{aYA2dZuo5: {rotate: -45}}}/></motion.div></Transition></Variants>
</LayoutGroup>)

});

const css = ["@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }", ".framer-u8Aii.framer-1elgclv, .framer-u8Aii .framer-1elgclv { display: block; }", ".framer-u8Aii.framer-11u7wwq { align-content: center; align-items: center; cursor: pointer; display: flex; flex-direction: column; flex-wrap: nowrap; gap: 10px; height: 24px; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: 24px; }", ".framer-u8Aii .framer-1g2vpwi { flex: none; height: 1px; left: calc(50.00000000000002% - 24px / 2); overflow: hidden; position: absolute; top: 8px; width: 24px; z-index: 1; }", ".framer-u8Aii .framer-b9gbwx { bottom: 8px; flex: none; height: 1px; left: 0px; overflow: hidden; position: absolute; right: 0px; z-index: 1; }", "@supports (background: -webkit-named-image(i)) and (not (font-palette:dark)) { .framer-u8Aii.framer-11u7wwq { gap: 0px; } .framer-u8Aii.framer-11u7wwq > * { margin: 0px; margin-bottom: calc(10px / 2); margin-top: calc(10px / 2); } .framer-u8Aii.framer-11u7wwq > :first-child { margin-top: 0px; } .framer-u8Aii.framer-11u7wwq > :last-child { margin-bottom: 0px; } }", ".framer-u8Aii.framer-v-1jx1ofi .framer-1g2vpwi { top: calc(50.00000000000002% - 1px / 2); }", ".framer-u8Aii.framer-v-1jx1ofi .framer-b9gbwx { bottom: unset; left: calc(50.00000000000002% - 24px / 2); right: unset; top: calc(50.00000000000002% - 1px / 2); width: 24px; }"]

/**
 * This is a generated Framer component.
 * @framerIntrinsicHeight 24
 * @framerIntrinsicWidth 24
 * @framerCanvasComponentVariantDetails {"propertyName":"variant","data":{"default":{"layout":["fixed","fixed"]},"aYA2dZuo5":{"layout":["fixed","fixed"]}}}
 * @framerVariables {"AR4mury4J":"click"}
 * @framerImmutableVariables true
 * @framerDisplayContentsDiv false
 * @framerComponentViewportWidth true
 */
const Framerv8Vx148wp: React.ComponentType<Props> = withCSS(Component, css, "framer-u8Aii") as typeof Component;
export default Framerv8Vx148wp;

Framerv8Vx148wp.displayName = "Menu";

Framerv8Vx148wp.defaultProps = {height: 24, width: 24};

addPropertyControls(Framerv8Vx148wp, {variant: {options: ["XTyZS4MpB", "aYA2dZuo5"], optionTitles: ["Default", "Close"], title: "Variant", type: ControlType.Enum}, AR4mury4J: {title: "Click", type: ControlType.EventHandler}} as any)

addFonts(Framerv8Vx148wp, [{explicitInter: true, fonts: []}], {supportsExplicitInterCodegen: true})